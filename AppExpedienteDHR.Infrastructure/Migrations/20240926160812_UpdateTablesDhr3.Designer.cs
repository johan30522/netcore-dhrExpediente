// <auto-generated />
using System;
using AppExpedienteDHR.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppExpedienteDHR.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240926160812_UpdateTablesDhr3")]
    partial class UpdateTablesDhr3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Adjunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaSubida")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreOriginal")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Adjuntos", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denuncia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AceptaTerminos")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenuncianteId")
                        .HasColumnType("int");

                    b.Property<string>("DetalleDenuncia")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FechaDenuncia")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IncluyePersonaAfectada")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PersonaAfectadaId")
                        .HasColumnType("int");

                    b.Property<string>("Petitoria")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DenuncianteId");

                    b.HasIndex("PersonaAfectadaId");

                    b.ToTable("Denuncias", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.DenunciaAdjunto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdjuntoId")
                        .HasColumnType("int");

                    b.Property<int>("DenunciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdjuntoId");

                    b.HasIndex("DenunciaId");

                    b.ToTable("DenunciaAdjuntos", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denunciante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CantonCodigo")
                        .HasColumnType("int");

                    b.Property<string>("CorreoElectronico")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DireccionExacta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistritoCodigo")
                        .HasColumnType("int");

                    b.Property<bool>("EsMenorEdad")
                        .HasColumnType("bit");

                    b.Property<int>("EscolaridadId")
                        .HasColumnType("int");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaisOrigenCodigo")
                        .HasColumnType("int");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinciaCodigo")
                        .HasColumnType("int");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<string>("TelefonoCelular")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TieneRequerimientoEspecial")
                        .HasColumnType("bit");

                    b.Property<int>("TipoIdentificacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CantonCodigo");

                    b.HasIndex("DistritoCodigo");

                    b.HasIndex("EscolaridadId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("PaisOrigenCodigo");

                    b.HasIndex("ProvinciaCodigo");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoIdentificacionId");

                    b.ToTable("Denunciantes", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Expediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenunciaId")
                        .HasColumnType("int");

                    b.Property<int?>("DenuncianteId")
                        .HasColumnType("int");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DenunciaId")
                        .IsUnique();

                    b.HasIndex("DenuncianteId");

                    b.ToTable("Expedientes", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.PersonaAfectada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumeroIdentificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrimerApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SegundoApellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<int>("TipoIdentificacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SexoId");

                    b.HasIndex("TipoIdentificacionId");

                    b.ToTable("PersonasAfectada", "dhr");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Canton", b =>
                {
                    b.Property<int>("CodigoCanton")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoCanton"));

                    b.Property<decimal?>("AreaCantonKm2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CodigoProvincia")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodigoCanton");

                    b.HasIndex("CodigoProvincia");

                    b.ToTable("Cantones", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Distrito", b =>
                {
                    b.Property<int>("CodigoDistrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoDistrito"));

                    b.Property<decimal?>("AreaDistritoKm2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CodigoCanton")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodigoDistrito");

                    b.HasIndex("CodigoCanton");

                    b.ToTable("Distritos", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Escolaridad", b =>
                {
                    b.Property<int>("EscolaridadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EscolaridadId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EscolaridadId");

                    b.ToTable("Escolaridad", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.EstadoCivil", b =>
                {
                    b.Property<int>("EstadoCivilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstadoCivilId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EstadoCivilId");

                    b.ToTable("EstadoCivil", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Pais", b =>
                {
                    b.Property<int>("CodigoNumerico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CodigoNumerico"));

                    b.Property<string>("CodigoISOAlfa2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("CodigoISOAlfa3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("DenominacionPais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CodigoNumerico");

                    b.ToTable("Paises", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Provincia", b =>
                {
                    b.Property<int>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Codigo"));

                    b.Property<decimal?>("AreaKm2")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Area_Km2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Codigo");

                    b.ToTable("Provincias", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Sexo", b =>
                {
                    b.Property<int>("SexoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SexoId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SexoId");

                    b.ToTable("Sexo", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.TipoIdentificacion", b =>
                {
                    b.Property<int>("TipoIdentificacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoIdentificacionId"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipoIdentificacionId");

                    b.ToTable("TipoIdentificacion", "gen", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.LockRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdLocked")
                        .HasColumnType("int");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("LockDuration")
                        .HasColumnType("time");

                    b.Property<DateTime>("LockedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LockedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.ToTable("LockRecords");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionGroupWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("GroupId");

                    b.ToTable("ActionGroupWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionRuleWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("ResultStateId")
                        .HasColumnType("int");

                    b.Property<string>("RuleJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ResultStateId");

                    b.ToTable("ActionRuleWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NextStateId")
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NextStateId");

                    b.HasIndex("StateId");

                    b.ToTable("ActionWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowHistoryWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionPerformedId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NewStateId")
                        .HasColumnType("int");

                    b.Property<string>("PerformedByUserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PreviousStateId")
                        .HasColumnType("int");

                    b.Property<int>("RequestFlowHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("RequestFlowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionPerformedId");

                    b.HasIndex("NewStateId");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("PreviousStateId");

                    b.HasIndex("RequestFlowHeaderId");

                    b.ToTable("FlowHistoryWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowRequestHeaderWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStateId")
                        .HasColumnType("int");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequestType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("FlowId");

                    b.ToTable("FlowRequestHeaderWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FlowWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupUserWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUserWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("GroupWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FlowId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinalState")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInitialState")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Order")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.ToTable("StateWfs");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denuncia", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denunciante", "Denunciante")
                        .WithMany("Denuncias")
                        .HasForeignKey("DenuncianteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.PersonaAfectada", "PersonaAfectada")
                        .WithMany("Denuncias")
                        .HasForeignKey("PersonaAfectadaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Denunciante");

                    b.Navigation("PersonaAfectada");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.DenunciaAdjunto", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.Adjunto", "Adjunto")
                        .WithMany()
                        .HasForeignKey("AdjuntoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denuncia", "Denuncia")
                        .WithMany("DenunciaAdjuntos")
                        .HasForeignKey("DenunciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adjunto");

                    b.Navigation("Denuncia");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denunciante", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Canton", "Canton")
                        .WithMany()
                        .HasForeignKey("CantonCodigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Distrito", "Distrito")
                        .WithMany()
                        .HasForeignKey("DistritoCodigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Escolaridad", "Escolaridad")
                        .WithMany()
                        .HasForeignKey("EscolaridadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Pais", "PaisOrigen")
                        .WithMany()
                        .HasForeignKey("PaisOrigenCodigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Provincia", "Provincia")
                        .WithMany()
                        .HasForeignKey("ProvinciaCodigo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.TipoIdentificacion", "TipoIdentificacion")
                        .WithMany()
                        .HasForeignKey("TipoIdentificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Canton");

                    b.Navigation("Distrito");

                    b.Navigation("Escolaridad");

                    b.Navigation("EstadoCivil");

                    b.Navigation("PaisOrigen");

                    b.Navigation("Provincia");

                    b.Navigation("Sexo");

                    b.Navigation("TipoIdentificacion");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Expediente", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denuncia", "Denuncia")
                        .WithOne("Expediente")
                        .HasForeignKey("AppExpedienteDHR.Core.Domain.Entities.Dhr.Expediente", "DenunciaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denunciante", "Denunciante")
                        .WithMany("Expedientes")
                        .HasForeignKey("DenuncianteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Denuncia");

                    b.Navigation("Denunciante");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.PersonaAfectada", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.TipoIdentificacion", "TipoIdentificacion")
                        .WithMany()
                        .HasForeignKey("TipoIdentificacionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sexo");

                    b.Navigation("TipoIdentificacion");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Canton", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Provincia", "Provincia")
                        .WithMany("Cantones")
                        .HasForeignKey("CodigoProvincia")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Distrito", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.General.Canton", "Canton")
                        .WithMany("Distritos")
                        .HasForeignKey("CodigoCanton")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Canton");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.LockRecord", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LockedByUser");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionGroupWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", "Action")
                        .WithMany("ActionGroups")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupWf", "Group")
                        .WithMany("ActionGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionRuleWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", "Action")
                        .WithMany("ActionRules")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "ResultState")
                        .WithMany()
                        .HasForeignKey("ResultStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("ResultState");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "NextState")
                        .WithMany()
                        .HasForeignKey("NextStateId");

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "State")
                        .WithMany("Actions")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NextState");

                    b.Navigation("State");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowHistoryWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", "ActionPerformed")
                        .WithMany()
                        .HasForeignKey("ActionPerformedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "NewState")
                        .WithMany()
                        .HasForeignKey("NewStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "PreviousState")
                        .WithMany()
                        .HasForeignKey("PreviousStateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowRequestHeaderWf", "RequestFlowHeader")
                        .WithMany("FlowHistories")
                        .HasForeignKey("RequestFlowHeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ActionPerformed");

                    b.Navigation("NewState");

                    b.Navigation("PerformedByUser");

                    b.Navigation("PreviousState");

                    b.Navigation("RequestFlowHeader");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowRequestHeaderWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", "CurrentState")
                        .WithMany()
                        .HasForeignKey("CurrentStateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowWf", "Flow")
                        .WithMany("RequestFlowHeaders")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("CurrentState");

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupUserWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupWf", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowWf", "Flow")
                        .WithMany("Groups")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowWf", "Flow")
                        .WithMany("States")
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Flow");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUserRole", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denuncia", b =>
                {
                    b.Navigation("DenunciaAdjuntos");

                    b.Navigation("Expediente")
                        .IsRequired();
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.Denunciante", b =>
                {
                    b.Navigation("Denuncias");

                    b.Navigation("Expedientes");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.Dhr.PersonaAfectada", b =>
                {
                    b.Navigation("Denuncias");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Canton", b =>
                {
                    b.Navigation("Distritos");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.General.Provincia", b =>
                {
                    b.Navigation("Cantones");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.ActionWf", b =>
                {
                    b.Navigation("ActionGroups");

                    b.Navigation("ActionRules");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowRequestHeaderWf", b =>
                {
                    b.Navigation("FlowHistories");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.FlowWf", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("RequestFlowHeaders");

                    b.Navigation("States");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.GroupWf", b =>
                {
                    b.Navigation("ActionGroups");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.Entities.WorkflowEntities.StateWf", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("AppExpedienteDHR.Core.Domain.IdentityEntities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
